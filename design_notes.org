#+STARTUP: showeverything


* Three main components
** Item
the thing that we want to perform an action on.


** Action
the actual action we perform

** Parameter

Parameter to the action (e.g. for the action 'open' the parameter
would be the application to open with)

* Searching

We select the item by some data structure for string searching,
i.e. every item is a weighted string. The weight represents the
priority; i.e some items are more important than others (i.e. weights
can be number of times someone has chosen this action before)

We implement this using some sort of compressed suffix trie. Given a query
pattern we search for the items matching this substring. The result
will be a subtree. From this subtree we wish to select the k maximum
weight items (in decreasing weight order).

** Finding the max-weights

For a single maximum this should be fairly easy; just store subtree
maxima's (i.e. which leaf has the max weight).

For top-k that may be a bit more difficult though.

*** top-k

maybe something like: maintain the leaves in a separate DS, ordered by in-order
traversal of the suffix trie; selecting a subtree then selects a
consecutive interval of these nodes. Hence, if our separate DS is a
priority search tree we can easily update/query the weights?


Actually, I guess we can use range-maxim queries: every subtree node
would store the min leaf-num l and max-leaf num r. Then the spearte DS
(corresp. to the in-order traversal) would store a RMQ data
structure. To report top-k; find the max at i in [l,r], then recursively find max
among [l,i-1] and [i+1,r]. This is basically the document-retrieval solution.


I wonder if we can do dynamic (insert/increase-maxim-only?) RMQ in
O(1) time.


** TODO Narrowing

It would be nice if we can do some sort of narrowing. (i.e. searching
with multiple successive patterns).

Not sure if we support this; the subtree then also has to be some sort
of "proper suffix tree".

** Suffix tries with multiple strings

Add a marker $_i after every individual string; ignore suffixes
spanning a $_i marker

** Data structure implementation

Some candiates:

*** use wavelet trees?

advantage would be that they are succinct

https://arxiv.org/pdf/1204.3581.pdf

*** or just compressed-tries

just represent each node by a BST

** Updates
*** Updates in the priories

Should be doable in "length of the string" time or so, since the
string DS itself does not change.

*** Inserting new strings

Just append them to the text; the wavelet trees and tries support this

*** Deletions

I'm hoping we can do them lazily; i.e. just keep them in; rebuild the
DS from scratch once half the DS is deleted.

**** TODO Figure out what to do for the priorities to make this work

For a single max-query we can simply set the weight of that string to
-\infty. (thus deleting in length(string) time). Not sure about the
top-k part.


* Searching among actions and parameters

Actions and parameters both also have a weight, and we want the
max-weight one(s). We should probably use the same DS for the actions
and parameters, since these are also selected using string searches.

There is some relation between the three things though. An item should
ideally learn what the max-priority action is that corresponds with
this item.

* TODO make sure that our database/data structure gets stored on disk

it needs to persist.

So use binary or serial or so to serialize it?

** TODO How do we deal with versioning?

I guess using safecopy?

** TODO Figure out if there are IO/efficient suffix trees or so

* TODO Figuring out what and how to catalog
** TODO how do we get items

We want access to:

- files (in some subdirectories) (maybe reusing some sort of existing database
  (locate?))
- considering connected devices/mounted volumes
- applications

- maybe even searching for words inside documents?


** TODO actions

- open applications
- ejecting/unmonting volumes

** TODO parameters

- open with certain application

* Interface

Maybe we should start with some command line tool to get started. But
it should really have a GUI interface

** TODO Select some GUI framework
It should have some sort of tray icon thing

* General application design

I think I want to try using freer-monads to organize the main
thing. Probably using the polysemi package.

Some general effects that we will need

** TODO persistent DS access/updates
** TODO logging
** TODO GUI stuff?
We want something native. Candiates:

- fltk
- the declarative gtk thing
- some qt package?

* TODO Testing

figure out what we actually want to test/how to set that up. Probably
using hspec and quickcheck
